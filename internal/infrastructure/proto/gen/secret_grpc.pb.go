// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: secret.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	SecretService_CreateSecret_FullMethodName             = "/secret.SecretService/CreateSecret"
	SecretService_CreateSecretStream_FullMethodName       = "/secret.SecretService/CreateSecretStream"
	SecretService_ListSecrets_FullMethodName              = "/secret.SecretService/ListSecrets"
	SecretService_GetLatestSecret_FullMethodName          = "/secret.SecretService/GetLatestSecret"
	SecretService_GetLatestSecretStream_FullMethodName    = "/secret.SecretService/GetLatestSecretStream"
	SecretService_GetSecretByVersion_FullMethodName       = "/secret.SecretService/GetSecretByVersion"
	SecretService_GetSecretStreamByVersion_FullMethodName = "/secret.SecretService/GetSecretStreamByVersion"
	SecretService_DeleteSecret_FullMethodName             = "/secret.SecretService/DeleteSecret"
)

// SecretServiceClient is the client API for SecretService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SecretServiceClient interface {
	CreateSecret(ctx context.Context, in *CreateSecretRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	CreateSecretStream(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[CreateSecretChunkRequest, emptypb.Empty], error)
	ListSecrets(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ListSecretsResponse, error)
	GetLatestSecret(ctx context.Context, in *GetLatestSecretRequest, opts ...grpc.CallOption) (*GetSecretResponse, error)
	GetLatestSecretStream(ctx context.Context, in *GetLatestSecretRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[GetSecretChunkResponse], error)
	GetSecretByVersion(ctx context.Context, in *GetSecretByVersionRequest, opts ...grpc.CallOption) (*GetSecretResponse, error)
	GetSecretStreamByVersion(ctx context.Context, in *GetSecretByVersionRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[GetSecretChunkResponse], error)
	DeleteSecret(ctx context.Context, in *DeleteSecretRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type secretServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSecretServiceClient(cc grpc.ClientConnInterface) SecretServiceClient {
	return &secretServiceClient{cc}
}

func (c *secretServiceClient) CreateSecret(ctx context.Context, in *CreateSecretRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, SecretService_CreateSecret_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *secretServiceClient) CreateSecretStream(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[CreateSecretChunkRequest, emptypb.Empty], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &SecretService_ServiceDesc.Streams[0], SecretService_CreateSecretStream_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[CreateSecretChunkRequest, emptypb.Empty]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type SecretService_CreateSecretStreamClient = grpc.ClientStreamingClient[CreateSecretChunkRequest, emptypb.Empty]

func (c *secretServiceClient) ListSecrets(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ListSecretsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListSecretsResponse)
	err := c.cc.Invoke(ctx, SecretService_ListSecrets_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *secretServiceClient) GetLatestSecret(ctx context.Context, in *GetLatestSecretRequest, opts ...grpc.CallOption) (*GetSecretResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetSecretResponse)
	err := c.cc.Invoke(ctx, SecretService_GetLatestSecret_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *secretServiceClient) GetLatestSecretStream(ctx context.Context, in *GetLatestSecretRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[GetSecretChunkResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &SecretService_ServiceDesc.Streams[1], SecretService_GetLatestSecretStream_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[GetLatestSecretRequest, GetSecretChunkResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type SecretService_GetLatestSecretStreamClient = grpc.ServerStreamingClient[GetSecretChunkResponse]

func (c *secretServiceClient) GetSecretByVersion(ctx context.Context, in *GetSecretByVersionRequest, opts ...grpc.CallOption) (*GetSecretResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetSecretResponse)
	err := c.cc.Invoke(ctx, SecretService_GetSecretByVersion_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *secretServiceClient) GetSecretStreamByVersion(ctx context.Context, in *GetSecretByVersionRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[GetSecretChunkResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &SecretService_ServiceDesc.Streams[2], SecretService_GetSecretStreamByVersion_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[GetSecretByVersionRequest, GetSecretChunkResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type SecretService_GetSecretStreamByVersionClient = grpc.ServerStreamingClient[GetSecretChunkResponse]

func (c *secretServiceClient) DeleteSecret(ctx context.Context, in *DeleteSecretRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, SecretService_DeleteSecret_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SecretServiceServer is the server API for SecretService service.
// All implementations must embed UnimplementedSecretServiceServer
// for forward compatibility.
type SecretServiceServer interface {
	CreateSecret(context.Context, *CreateSecretRequest) (*emptypb.Empty, error)
	CreateSecretStream(grpc.ClientStreamingServer[CreateSecretChunkRequest, emptypb.Empty]) error
	ListSecrets(context.Context, *emptypb.Empty) (*ListSecretsResponse, error)
	GetLatestSecret(context.Context, *GetLatestSecretRequest) (*GetSecretResponse, error)
	GetLatestSecretStream(*GetLatestSecretRequest, grpc.ServerStreamingServer[GetSecretChunkResponse]) error
	GetSecretByVersion(context.Context, *GetSecretByVersionRequest) (*GetSecretResponse, error)
	GetSecretStreamByVersion(*GetSecretByVersionRequest, grpc.ServerStreamingServer[GetSecretChunkResponse]) error
	DeleteSecret(context.Context, *DeleteSecretRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedSecretServiceServer()
}

// UnimplementedSecretServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSecretServiceServer struct{}

func (UnimplementedSecretServiceServer) CreateSecret(context.Context, *CreateSecretRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSecret not implemented")
}
func (UnimplementedSecretServiceServer) CreateSecretStream(grpc.ClientStreamingServer[CreateSecretChunkRequest, emptypb.Empty]) error {
	return status.Errorf(codes.Unimplemented, "method CreateSecretStream not implemented")
}
func (UnimplementedSecretServiceServer) ListSecrets(context.Context, *emptypb.Empty) (*ListSecretsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSecrets not implemented")
}
func (UnimplementedSecretServiceServer) GetLatestSecret(context.Context, *GetLatestSecretRequest) (*GetSecretResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLatestSecret not implemented")
}
func (UnimplementedSecretServiceServer) GetLatestSecretStream(*GetLatestSecretRequest, grpc.ServerStreamingServer[GetSecretChunkResponse]) error {
	return status.Errorf(codes.Unimplemented, "method GetLatestSecretStream not implemented")
}
func (UnimplementedSecretServiceServer) GetSecretByVersion(context.Context, *GetSecretByVersionRequest) (*GetSecretResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSecretByVersion not implemented")
}
func (UnimplementedSecretServiceServer) GetSecretStreamByVersion(*GetSecretByVersionRequest, grpc.ServerStreamingServer[GetSecretChunkResponse]) error {
	return status.Errorf(codes.Unimplemented, "method GetSecretStreamByVersion not implemented")
}
func (UnimplementedSecretServiceServer) DeleteSecret(context.Context, *DeleteSecretRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSecret not implemented")
}
func (UnimplementedSecretServiceServer) mustEmbedUnimplementedSecretServiceServer() {}
func (UnimplementedSecretServiceServer) testEmbeddedByValue()                       {}

// UnsafeSecretServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SecretServiceServer will
// result in compilation errors.
type UnsafeSecretServiceServer interface {
	mustEmbedUnimplementedSecretServiceServer()
}

func RegisterSecretServiceServer(s grpc.ServiceRegistrar, srv SecretServiceServer) {
	// If the following call pancis, it indicates UnimplementedSecretServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&SecretService_ServiceDesc, srv)
}

func _SecretService_CreateSecret_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSecretRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecretServiceServer).CreateSecret(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SecretService_CreateSecret_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecretServiceServer).CreateSecret(ctx, req.(*CreateSecretRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecretService_CreateSecretStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(SecretServiceServer).CreateSecretStream(&grpc.GenericServerStream[CreateSecretChunkRequest, emptypb.Empty]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type SecretService_CreateSecretStreamServer = grpc.ClientStreamingServer[CreateSecretChunkRequest, emptypb.Empty]

func _SecretService_ListSecrets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecretServiceServer).ListSecrets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SecretService_ListSecrets_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecretServiceServer).ListSecrets(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecretService_GetLatestSecret_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLatestSecretRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecretServiceServer).GetLatestSecret(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SecretService_GetLatestSecret_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecretServiceServer).GetLatestSecret(ctx, req.(*GetLatestSecretRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecretService_GetLatestSecretStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetLatestSecretRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SecretServiceServer).GetLatestSecretStream(m, &grpc.GenericServerStream[GetLatestSecretRequest, GetSecretChunkResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type SecretService_GetLatestSecretStreamServer = grpc.ServerStreamingServer[GetSecretChunkResponse]

func _SecretService_GetSecretByVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSecretByVersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecretServiceServer).GetSecretByVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SecretService_GetSecretByVersion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecretServiceServer).GetSecretByVersion(ctx, req.(*GetSecretByVersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecretService_GetSecretStreamByVersion_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetSecretByVersionRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SecretServiceServer).GetSecretStreamByVersion(m, &grpc.GenericServerStream[GetSecretByVersionRequest, GetSecretChunkResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type SecretService_GetSecretStreamByVersionServer = grpc.ServerStreamingServer[GetSecretChunkResponse]

func _SecretService_DeleteSecret_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSecretRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecretServiceServer).DeleteSecret(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SecretService_DeleteSecret_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecretServiceServer).DeleteSecret(ctx, req.(*DeleteSecretRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SecretService_ServiceDesc is the grpc.ServiceDesc for SecretService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SecretService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "secret.SecretService",
	HandlerType: (*SecretServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateSecret",
			Handler:    _SecretService_CreateSecret_Handler,
		},
		{
			MethodName: "ListSecrets",
			Handler:    _SecretService_ListSecrets_Handler,
		},
		{
			MethodName: "GetLatestSecret",
			Handler:    _SecretService_GetLatestSecret_Handler,
		},
		{
			MethodName: "GetSecretByVersion",
			Handler:    _SecretService_GetSecretByVersion_Handler,
		},
		{
			MethodName: "DeleteSecret",
			Handler:    _SecretService_DeleteSecret_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "CreateSecretStream",
			Handler:       _SecretService_CreateSecretStream_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "GetLatestSecretStream",
			Handler:       _SecretService_GetLatestSecretStream_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetSecretStreamByVersion",
			Handler:       _SecretService_GetSecretStreamByVersion_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "secret.proto",
}
