// Code generated by MockGen. DO NOT EDIT.
// Source: internal/domain/secret.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	io "io"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	domain "github.com/ulixes-bloom/ya-gophkeeper-cli/internal/domain"
)

// MockSecretClient is a mock of SecretClient interface.
type MockSecretClient struct {
	ctrl     *gomock.Controller
	recorder *MockSecretClientMockRecorder
}

// MockSecretClientMockRecorder is the mock recorder for MockSecretClient.
type MockSecretClientMockRecorder struct {
	mock *MockSecretClient
}

// NewMockSecretClient creates a new mock instance.
func NewMockSecretClient(ctrl *gomock.Controller) *MockSecretClient {
	mock := &MockSecretClient{ctrl: ctrl}
	mock.recorder = &MockSecretClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSecretClient) EXPECT() *MockSecretClientMockRecorder {
	return m.recorder
}

// CreateSecret mocks base method.
func (m *MockSecretClient) CreateSecret(ctx context.Context, secret domain.Secret) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSecret", ctx, secret)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateSecret indicates an expected call of CreateSecret.
func (mr *MockSecretClientMockRecorder) CreateSecret(ctx, secret interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSecret", reflect.TypeOf((*MockSecretClient)(nil).CreateSecret), ctx, secret)
}

// CreateSecretStream mocks base method.
func (m *MockSecretClient) CreateSecretStream(ctx context.Context, SecretInfo domain.Secret, reader io.Reader) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSecretStream", ctx, SecretInfo, reader)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateSecretStream indicates an expected call of CreateSecretStream.
func (mr *MockSecretClientMockRecorder) CreateSecretStream(ctx, SecretInfo, reader interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSecretStream", reflect.TypeOf((*MockSecretClient)(nil).CreateSecretStream), ctx, SecretInfo, reader)
}

// DeleteSecret mocks base method.
func (m *MockSecretClient) DeleteSecret(ctx context.Context, secretName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSecret", ctx, secretName)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSecret indicates an expected call of DeleteSecret.
func (mr *MockSecretClientMockRecorder) DeleteSecret(ctx, secretName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSecret", reflect.TypeOf((*MockSecretClient)(nil).DeleteSecret), ctx, secretName)
}

// GetLatestSecret mocks base method.
func (m *MockSecretClient) GetLatestSecret(ctx context.Context, secretName string) (*domain.Secret, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLatestSecret", ctx, secretName)
	ret0, _ := ret[0].(*domain.Secret)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLatestSecret indicates an expected call of GetLatestSecret.
func (mr *MockSecretClientMockRecorder) GetLatestSecret(ctx, secretName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLatestSecret", reflect.TypeOf((*MockSecretClient)(nil).GetLatestSecret), ctx, secretName)
}

// GetLatestSecretStream mocks base method.
func (m *MockSecretClient) GetLatestSecretStream(ctx context.Context, secretName string) (io.Reader, *domain.SecretInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLatestSecretStream", ctx, secretName)
	ret0, _ := ret[0].(io.Reader)
	ret1, _ := ret[1].(*domain.SecretInfo)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetLatestSecretStream indicates an expected call of GetLatestSecretStream.
func (mr *MockSecretClientMockRecorder) GetLatestSecretStream(ctx, secretName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLatestSecretStream", reflect.TypeOf((*MockSecretClient)(nil).GetLatestSecretStream), ctx, secretName)
}

// GetSecretByVersion mocks base method.
func (m *MockSecretClient) GetSecretByVersion(ctx context.Context, secretName string, version int32) (*domain.Secret, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSecretByVersion", ctx, secretName, version)
	ret0, _ := ret[0].(*domain.Secret)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSecretByVersion indicates an expected call of GetSecretByVersion.
func (mr *MockSecretClientMockRecorder) GetSecretByVersion(ctx, secretName, version interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSecretByVersion", reflect.TypeOf((*MockSecretClient)(nil).GetSecretByVersion), ctx, secretName, version)
}

// GetSecretStreamByVersion mocks base method.
func (m *MockSecretClient) GetSecretStreamByVersion(ctx context.Context, secretName string, version int32) (io.Reader, *domain.SecretInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSecretStreamByVersion", ctx, secretName, version)
	ret0, _ := ret[0].(io.Reader)
	ret1, _ := ret[1].(*domain.SecretInfo)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetSecretStreamByVersion indicates an expected call of GetSecretStreamByVersion.
func (mr *MockSecretClientMockRecorder) GetSecretStreamByVersion(ctx, secretName, version interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSecretStreamByVersion", reflect.TypeOf((*MockSecretClient)(nil).GetSecretStreamByVersion), ctx, secretName, version)
}

// ListSecrets mocks base method.
func (m *MockSecretClient) ListSecrets(ctx context.Context) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSecrets", ctx)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSecrets indicates an expected call of ListSecrets.
func (mr *MockSecretClientMockRecorder) ListSecrets(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSecrets", reflect.TypeOf((*MockSecretClient)(nil).ListSecrets), ctx)
}

// MockSecretService is a mock of SecretService interface.
type MockSecretService struct {
	ctrl     *gomock.Controller
	recorder *MockSecretServiceMockRecorder
}

// MockSecretServiceMockRecorder is the mock recorder for MockSecretService.
type MockSecretServiceMockRecorder struct {
	mock *MockSecretService
}

// NewMockSecretService creates a new mock instance.
func NewMockSecretService(ctrl *gomock.Controller) *MockSecretService {
	mock := &MockSecretService{ctrl: ctrl}
	mock.recorder = &MockSecretServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSecretService) EXPECT() *MockSecretServiceMockRecorder {
	return m.recorder
}

// CreateSecret mocks base method.
func (m *MockSecretService) CreateSecret(ctx context.Context, secret domain.Secret, contentReader io.Reader) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSecret", ctx, secret, contentReader)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateSecret indicates an expected call of CreateSecret.
func (mr *MockSecretServiceMockRecorder) CreateSecret(ctx, secret, contentReader interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSecret", reflect.TypeOf((*MockSecretService)(nil).CreateSecret), ctx, secret, contentReader)
}

// DeleteSecret mocks base method.
func (m *MockSecretService) DeleteSecret(ctx context.Context, secretName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSecret", ctx, secretName)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSecret indicates an expected call of DeleteSecret.
func (mr *MockSecretServiceMockRecorder) DeleteSecret(ctx, secretName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSecret", reflect.TypeOf((*MockSecretService)(nil).DeleteSecret), ctx, secretName)
}

// GetLatestSecret mocks base method.
func (m *MockSecretService) GetLatestSecret(ctx context.Context, secretName string) (*domain.Secret, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLatestSecret", ctx, secretName)
	ret0, _ := ret[0].(*domain.Secret)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLatestSecret indicates an expected call of GetLatestSecret.
func (mr *MockSecretServiceMockRecorder) GetLatestSecret(ctx, secretName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLatestSecret", reflect.TypeOf((*MockSecretService)(nil).GetLatestSecret), ctx, secretName)
}

// GetLatestSecretStream mocks base method.
func (m *MockSecretService) GetLatestSecretStream(ctx context.Context, secretName string) (io.Reader, *domain.SecretInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLatestSecretStream", ctx, secretName)
	ret0, _ := ret[0].(io.Reader)
	ret1, _ := ret[1].(*domain.SecretInfo)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetLatestSecretStream indicates an expected call of GetLatestSecretStream.
func (mr *MockSecretServiceMockRecorder) GetLatestSecretStream(ctx, secretName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLatestSecretStream", reflect.TypeOf((*MockSecretService)(nil).GetLatestSecretStream), ctx, secretName)
}

// GetSecretByVersion mocks base method.
func (m *MockSecretService) GetSecretByVersion(ctx context.Context, secretName string, version int32) (*domain.Secret, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSecretByVersion", ctx, secretName, version)
	ret0, _ := ret[0].(*domain.Secret)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSecretByVersion indicates an expected call of GetSecretByVersion.
func (mr *MockSecretServiceMockRecorder) GetSecretByVersion(ctx, secretName, version interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSecretByVersion", reflect.TypeOf((*MockSecretService)(nil).GetSecretByVersion), ctx, secretName, version)
}

// GetSecretStreamByVersion mocks base method.
func (m *MockSecretService) GetSecretStreamByVersion(ctx context.Context, secretName string, version int32) (io.Reader, *domain.SecretInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSecretStreamByVersion", ctx, secretName, version)
	ret0, _ := ret[0].(io.Reader)
	ret1, _ := ret[1].(*domain.SecretInfo)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetSecretStreamByVersion indicates an expected call of GetSecretStreamByVersion.
func (mr *MockSecretServiceMockRecorder) GetSecretStreamByVersion(ctx, secretName, version interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSecretStreamByVersion", reflect.TypeOf((*MockSecretService)(nil).GetSecretStreamByVersion), ctx, secretName, version)
}

// ListSecrets mocks base method.
func (m *MockSecretService) ListSecrets(ctx context.Context) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSecrets", ctx)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSecrets indicates an expected call of ListSecrets.
func (mr *MockSecretServiceMockRecorder) ListSecrets(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSecrets", reflect.TypeOf((*MockSecretService)(nil).ListSecrets), ctx)
}
